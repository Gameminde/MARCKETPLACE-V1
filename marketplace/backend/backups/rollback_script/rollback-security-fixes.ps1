# üö® ROLLBACK SCRIPT - S√âCURISATION SERVICES BACKEND
# Restaure les services originaux en cas de probl√®me

param(
    [string]$BackupDir = "./backups/original_20250824_002024",
    [switch]$Force
)

Write-Host "üîÑ D√©marrage du rollback des corrections de s√©curit√©..." -ForegroundColor Yellow

# V√©rifier que le backup existe
if (-not (Test-Path $BackupDir)) {
    Write-Host "‚ùå Erreur: R√©pertoire de backup introuvable: $BackupDir" -ForegroundColor Red
    Write-Host "üìÅ R√©pertoires disponibles:" -ForegroundColor Cyan
    Get-ChildItem "./backups/" | ForEach-Object { Write-Host "  - $($_.Name)" -ForegroundColor Gray }
    exit 1
}

# Confirmation utilisateur
if (-not $Force) {
    Write-Host "‚ö†Ô∏è  ATTENTION: Ce script va restaurer les services originaux" -ForegroundColor Red
    Write-Host "üìÅ Source: $BackupDir" -ForegroundColor Cyan
    Write-Host "üìÅ Destination: ./src/services/" -ForegroundColor Cyan
    
    $confirmation = Read-Host "√ätes-vous s√ªr de vouloir continuer? (oui/non)"
    if ($confirmation -ne "oui") {
        Write-Host "‚ùå Rollback annul√© par l'utilisateur" -ForegroundColor Yellow
        exit 0
    }
}

try {
    # 1. Cr√©er backup de l'√©tat actuel
    $currentBackup = "./backups/current_state_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
    Write-Host "üíæ Cr√©ation backup de l'√©tat actuel: $currentBackup" -ForegroundColor Cyan
    Copy-Item -Path "src/services/*.js" -Destination $currentBackup -Recurse -Force
    
    # 2. Restaurer les services originaux
    Write-Host "üîÑ Restauration des services originaux..." -ForegroundColor Yellow
    
    # Services critiques √† restaurer
    $criticalServices = @(
        "token-blacklist.service.js",
        "captcha.service.js", 
        "stripe.service.js",
        "database.service.js"
    )
    
    foreach ($service in $criticalServices) {
        $sourcePath = Join-Path $BackupDir $service
        $destPath = Join-Path "src/services" $service
        
        if (Test-Path $sourcePath) {
            Copy-Item -Path $sourcePath -Destination $destPath -Force
            Write-Host "‚úÖ Restaur√©: $service" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  Service non trouv√© dans backup: $service" -ForegroundColor Yellow
        }
    }
    
    # 3. Restaurer utils
    Write-Host "üîÑ Restauration des utilitaires..." -ForegroundColor Yellow
    $utilsBackup = Join-Path $BackupDir "sanitizer.js"
    if (Test-Path $utilsBackup) {
        Copy-Item -Path $utilsBackup -Destination "src/utils/sanitizer.js" -Force
        Write-Host "‚úÖ Restaur√©: sanitizer.js" -ForegroundColor Green
    }
    
    # 4. Validation du rollback
    Write-Host "üîç Validation du rollback..." -ForegroundColor Cyan
    
    # Test de chargement des services restaur√©s
    try {
        $tokenBlacklist = Get-Content "src/services/token-blacklist.service.js" | Select-String "new Redis"
        if ($tokenBlacklist) {
            Write-Host "‚úÖ Token-Blacklist: Redis direct restaur√©" -ForegroundColor Green
        }
        
        $captcha = Get-Content "src/services/captcha.service.js" | Select-String "timeout"
        if (-not $captcha) {
            Write-Host "‚úÖ CAPTCHA: Protection DoS supprim√©e" -ForegroundColor Green
        }
        
        $stripe = Get-Content "src/services/stripe.service.js" | Select-String "limits"
        if (-not $stripe) {
            Write-Host "‚úÖ Stripe: Validation financi√®re simplifi√©e" -ForegroundColor Green
        }
        
        $database = Get-Content "src/services/database.service.js" | Select-String "localhost"
        if ($database) {
            Write-Host "‚úÖ Database: Simulation connexion restaur√©e" -ForegroundColor Green
        }
        
        Write-Host "üéâ ROLLBACK R√âUSSI - Services originaux restaur√©s!" -ForegroundColor Green
        
    } catch {
        Write-Host "‚ùå Erreur lors de la validation: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    # 5. Instructions post-rollback
    Write-Host "`nüìã INSTRUCTIONS POST-ROLLBACK:" -ForegroundColor Cyan
    Write-Host "1. Red√©marrer le serveur: npm run dev" -ForegroundColor White
    Write-Host "2. V√©rifier la connectivit√© Redis" -ForegroundColor White
    Write-Host "3. Tester les endpoints critiques" -ForegroundColor White
    Write-Host "4. Analyser les logs pour d√©tecter les probl√®mes" -ForegroundColor White
    
    Write-Host "`nüíæ Backups cr√©√©s:" -ForegroundColor Cyan
    Write-Host "  - Original: $BackupDir" -ForegroundColor Gray
    Write-Host "  - √âtat actuel: $currentBackup" -ForegroundColor Gray
    
} catch {
    Write-Host "‚ùå ERREUR CRITIQUE LORS DU ROLLBACK: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "üîß Intervention manuelle requise" -ForegroundColor Red
    exit 1
}

Write-Host "`n‚úÖ Rollback termin√© avec succ√®s!" -ForegroundColor Green
